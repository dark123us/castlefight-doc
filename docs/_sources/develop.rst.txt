Разработка
==========

Модульная разработка
--------------------

Основная проблема, что для разработки обрезанные языки, не хватает 
средств для модульной разработки, поэтому можно воспользоваться либо
сборщиками к примеру в js использовать webpack.

Относительный путь lua
++++++++++++++++++++++

.. code:: lua

    local CURPATH = debug.getinfo(1,"S").source:match[[^@scripts\vscripts?(.*[\/])[^\/]-$]]
    local logging = require(CURPATH .. "logging.logging")

Js использование модулей
++++++++++++++++++++++++

https://github.com/jonnyreeves/js-logger/blob/master/src/logger.js

.. code:: js

  (function (global) {
    "use strict";
    var Logger = {};

    // Export to popular environments boilerplate.
    if (typeof define === "function" && define.amd) {
      define(Logger);
    } else if (typeof module !== "undefined" && module.exports) {
      module.exports = Logger;
    } else {
      Logger._prevLogger = global.Logger;

      Logger.noConflict = function () {
        global.Logger = Logger._prevLogger;
        return Logger;
      };

      global.Logger = Logger;
    }
  })(this);

Boilerplate 
+++++++++++

.. code:: js

    (function (global) {
        const log = (...msgs) => {
            if (msgs.length == 1){
                $.Msg(msgs[0]);
            } else {
                $.Msg(msgs);
            }
        };

        const NAME = "console"
        const UNIT = {[NAME]: {log}}
        if (typeof define === "function" && define.amd) {
            define(UNIT[NAME]);
        } else if (typeof module !== "undefined" && module.exports) {
            module.exports = UNIT[NAME];
        } else {
            UNIT[NAME]._prevLogger = global[NAME];
            UNIT[NAME].noConflict = function () {
                global[NAME] = UNIT[NAME]._prevLogger;
                return UNIT[NAME];
            };
            global[NAME] = UNIT[NAME];
        }
    })(this)
